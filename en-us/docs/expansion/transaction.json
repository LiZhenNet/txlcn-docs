{
  "filename": "transaction.md",
  "__html": "<h1>事务模式扩展</h1>\n<p>TX-LCN不仅仅支持LCN TXC TCC模式，也可以由开发者自定义符合TX-LCN控制原理的请求事务模型。</p>\n<h2>事务模式的接口定义</h2>\n<ol>\n<li>增加一种新的事务模式名称，不能与已有的模式重名,例如test模式。</li>\n</ol>\n<p>在使用新的模式时，只需要在业务上标准类型即可。如下：</p>\n<pre><code>\n    @TxTransaction(type = &quot;test&quot;)\n    @Transactional\n    public void test(){\n\n    }\n\n</code></pre>\n<ol start=\"2\">\n<li>实现<code>TransactionResourceExecutor</code>接口，处理db资源。</li>\n</ol>\n<pre><code>public interface TransactionResourceProxy {\n\n    /**\n     * 获取资源连接\n     *\n     * @param connectionCallback Connection提供者\n     * @return  Connection Connection\n     * @throws Throwable Throwable\n     */\n    Connection proxyConnection(ConnectionCallback connectionCallback) throws Throwable;\n\n}\n\n\n</code></pre>\n<ol start=\"3\">\n<li>实现不同状态下的事务控制 实现<code>DTXLocalControl</code> 接口处理业务。</li>\n</ol>\n<pre><code>public interface DTXLocalControl {\n\n    /**\n     * 业务代码执行前\n     *\n     * @param info info\n     * @throws  TransactionException TransactionException\n     */\n    default void preBusinessCode(TxTransactionInfo info) throws TransactionException {\n\n    }\n\n    /**\n     * 执行业务代码\n     *\n     * @param info info\n     * @return  Object Object\n     * @throws Throwable Throwable\n     */\n    default Object doBusinessCode(TxTransactionInfo info) throws Throwable {\n        return info.getBusinessCallback().call();\n    }\n\n\n    /**\n     * 业务代码执行失败\n     *\n     * @param info info\n     * @param throwable throwable\n     */\n    default void onBusinessCodeError(TxTransactionInfo info, Throwable throwable) throws TransactionException {\n\n    }\n\n    /**\n     * 业务代码执行成功\n     *\n     * @param info info\n     * @param result result\n     * @throws TransactionException TransactionException\n     */\n    default void onBusinessCodeSuccess(TxTransactionInfo info, Object result) throws TransactionException {\n\n    }\n\n    /**\n     * 清场\n     *\n     * @param info info\n     */\n    default void postBusinessCode(TxTransactionInfo info) {\n\n    }\n}\n</code></pre>\n<p>例如 LCN starting状态下的处理实现,bean name <code>control_lcn_starting</code>是标准规范，control_+模式名称+状态名称:</p>\n<pre><code>@Service(value = &quot;control_lcn_starting&quot;)\n@Slf4j\npublic class LcnStartingTransaction implements DTXLocalControl {\n\n    private final TransactionControlTemplate transactionControlTemplate;\n\n\n    @Autowired\n    public LcnStartingTransaction(TransactionControlTemplate transactionControlTemplate) {\n        this.transactionControlTemplate = transactionControlTemplate;\n    }\n\n    @Override\n    public void preBusinessCode(TxTransactionInfo info) throws TransactionException {\n        // create DTX group\n        transactionControlTemplate.createGroup(\n                info.getGroupId(), info.getUnitId(), info.getTransactionInfo(), info.getTransactionType());\n\n        // lcn type need connection proxy\n        DTXLocalContext.makeProxy();\n    }\n\n    @Override\n    public void onBusinessCodeError(TxTransactionInfo info, Throwable throwable) {\n        DTXLocalContext.cur().setSysTransactionState(0);\n    }\n\n    @Override\n    public void onBusinessCodeSuccess(TxTransactionInfo info, Object result) {\n        DTXLocalContext.cur().setSysTransactionState(1);\n    }\n\n    @Override\n    public void postBusinessCode(TxTransactionInfo info) {\n        // RPC close DTX group\n        transactionControlTemplate.notifyGroup(\n                info.getGroupId(), info.getUnitId(), info.getTransactionType(), DTXLocalContext.transactionState());\n    }\n}\n\n</code></pre>\n<p>说明：</p>\n<p>若增加的新的模式最好创建一个新的模块，然后调整pom增加该模块的支持即可。</p>\n",
  "link": "\\en-us\\docs\\expansion\\transaction.html",
  "meta": {}
}