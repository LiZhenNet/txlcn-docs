{
  "filename": "fqa.md",
  "__html": "<h1>FQA</h1>\n<h2>1. TxManager配置分布式事务时间的作用是？为什么？</h2>\n<blockquote>\n<p>自动补偿机制会自动修复在分布式事务时间后系统存在的可修复异常。为什么是<code>a &gt;= 2c + (b + c + d) * (e - 1) - Δ</code>？\n一次分布式事务下，事务发起方两次与TM的RPC（创建和通知事务组， 2c）, 事务参与方一次与TM的RPC（加入事务组，1c）, TxManager会RPC通知所有事务参与方(通知事务单元，1b),\n再加上微服务间RPC，综合调用链长度，即为上面的计算方法。</p>\n</blockquote>\n<h2>2. 为什么配置上TX-LCN不起作用？</h2>\n<p>A:\n首先建议尽量采用最新的版本。请按照以下步骤逐步排查：</p>\n<ol>\n<li>确认Tx-client(TC)与Tx-manager(TM)的版本是完全一致的。</li>\n<li>确认TC与TM的配置都没有问题，并确认TM是启动状态，可访问后台(默认密码：codingapi)。</li>\n<li>检测TM下TC在线模块是否正常对应。</li>\n<li>当以上都没有问题的时候，检查能否进入了<code>DataSourceAspect</code>的拦截,在开发工具的debug下环境下断点确认。<br>\n若没有进入拦截器，可能存在两种情况。<br>\n一：确认Datasource 是否为spring的bean对象，若非spring对象，请先处理成spring对象。<br>\n二：若是spring对象，但是无法进入拦截。可以自行添加切面的方式进入拦截。<br>\n该org.apache.tomcat.jdbc.pool.DataSourceProxy.getConnection方法就不能进入DataSource的拦截，可自行添加如下所示：</li>\n</ol>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-meta\">@Aspect</span>\n<span class=\"hljs-meta\">@Slf</span>4j\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TomcatDataSourceAspect</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Ordered</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> DTXResourceWeaver dtxResourceWeaver;<span class=\"hljs-comment\">//TX-LCN 资源切面处理对象</span>\n\n    <span class=\"hljs-meta\">@Around</span>(<span class=\"hljs-string\">\"execution(public java.sql.Connection org.apache.tomcat.jdbc.pool.DataSourceProxy.getConnection(..) )\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">around</span><span class=\"hljs-params\">(ProceedingJoinPoint point)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>{\n        log.info(<span class=\"hljs-string\">\"proxy my aspect..\"</span>);\n        <span class=\"hljs-keyword\">return</span> dtxResourceWeaver.getConnection(() -&gt; (Connection) point.proceed());\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOrder</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n}\n\n</code></pre>\n<ul>\n<li>若以上几点都无法解决您的问题，请将你的问题以issue的方式整理发给我们。</li>\n</ul>\n<h2>3. 如何在springboot 1.5 版本下使用TX-LCN</h2>\n<p>A:<br>\n在5.0.1.RELEASE版本以后开始支持了springboot 1.5版本。使用步骤</p>\n<ol>\n<li>导入5.0.1.RELEASE版本的pom。</li>\n<li>在properties下设置txlcn-org.springframework.cloud.commons.version版本到1.3.5.RELEASE。</li>\n</ol>\n<pre><code class=\"language-java\">       &lt;properties&gt;\n            &lt;codingapi.txlcn.version&gt;5.0.1.RELEASE&lt;/codingapi.txlcn.version&gt;   \n            &lt;txlcn-org.springframework.cloud.commons.version&gt;1.3.5.RELEASE&lt;/txlcn-org.springframework.cloud.commons.version&gt;\n        &lt;/properties&gt;\n</code></pre>\n<p>demo参考见https://github.com/codingapi/txlcn-demo 1.5.boot分支</p>\n",
  "link": "\\en-us\\docs\\fqa.html",
  "meta": {}
}