{
  "filename": "background.md",
  "__html": "<h1>Background</h1>\n<p>The first version of the LCN framework was released in June 2017, from 1.0 to 5.0.\nLCN is named by the earlier version of the LCN framework. When designing the 1.0-2.0 version of the framework at the beginning,\nthe steps of the framework design are as follows.</p>\n<ol>\n<li>Locking transaction unit（lock）</li>\n<li>Confirmation of transaction module status (confirm)</li>\n<li>Notify transaction (notify)</li>\n</ol>\n<p>The name is obtained by taking its initials.</p>\n<p>Since 5.0, the framework has compatible with three transaction modes: LCN, TCC and TXC.\nIn order to distinguish the LCN mode, the LCN distributed transaction is renamed TX-LCN distributed transaction framework.</p>\n<h2>Location of TX-LCN</h2>\n<blockquote>\n<p>LCN并不生产事务，LCN只是本地事务的协调工</p>\n</blockquote>\n<p>TX-LCN is positioned as a transaction coordination framework. The framework itself does not operate transactions, but is based on transaction coordination to achieve transaction consistency.</p>\n<h2>TX-LCN Solution</h2>\n<p>    在一个分布式系统下存在多个模块协调来完成一次业务。那么就存在一次业务事务下可能横跨多种数据源节点的可能。TX-LCN将可以解决这样的问题。</p>\n<p>    例如存在服务模块A 、B、 C。A模块是mysql作为数据源的服务，B模块是基于redis作为数据源的服务，C模块是基于mongo作为数据源的服务。若需要解决他们的事务一致性就需要针对不同的节点采用不同的方案，并且统一协调完成分布式事务的处理。</p>\n<p><img src=\"../../img/docs/abc.png\" alt=\"\"></p>\n<p>方案：</p>\n<p>    若采用TX-LCN分布式事务框架，则可以将A模块采用LCN模式、B/C采用TCC模式就能完美解决。</p>\n",
  "link": "\\en-us\\docs\\background.html",
  "meta": {}
}