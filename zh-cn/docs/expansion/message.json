{
  "filename": "message.md",
  "__html": "<h1>通讯协议扩展</h1>\n<p>通讯协议扩展是指txclient与txmanager通讯的协议扩展。</p>\n<p>目前TX-LCN默认采用了netty方式通讯。关于拓展也以netty方式来说明如何拓展。</p>\n<h2>拓展txlcn-txmsg</h2>\n<p>主要实现6个接口，其中下面4个是由txlcn-txmsg的实现方提供:</p>\n<ul>\n<li>发起请求调用客户端 <code>RpcClient</code></li>\n</ul>\n<pre><code>public abstract class RpcClient {\n\n    @Autowired\n    private RpcLoadBalance rpcLoadBalance;\n\n    /**\n     * 发送指令不需要返回数据，需要知道返回的状态\n     *\n     * @param rpcCmd 指令内容\n     * @return 指令状态\n     * @throws RpcException 远程调用请求异常\n     */\n    public abstract RpcResponseState send(RpcCmd rpcCmd) throws RpcException;\n\n\n    /**\n     * 发送指令不需要返回数据，需要知道返回的状态\n     *\n     * @param remoteKey 远程标识关键字\n     * @param msg       指令内容\n     * @return 指令状态\n     * @throws RpcException 远程调用请求异常\n     */\n    public abstract RpcResponseState send(String remoteKey, MessageDto msg) throws RpcException;\n\n\n    /**\n     * 发送请求并获取响应\n     *\n     * @param rpcCmd 指令内容\n     * @return 响应指令数据\n     * @throws RpcException 远程调用请求异常\n     */\n    public abstract MessageDto request(RpcCmd rpcCmd) throws RpcException;\n\n\n    /**\n     * 发送请求并响应\n     *\n     * @param remoteKey 远程标识关键字\n     * @param msg       请求内容\n     * @return 相应指令数据\n     * @throws RpcException 远程调用请求异常\n     */\n    public abstract MessageDto request(String remoteKey, MessageDto msg) throws RpcException;\n\n    /**\n     * 发送请求并获取响应\n     *\n     * @param remoteKey 远程标识关键字\n     * @param msg       请求内容\n     * @param timeout   超时时间\n     * @return 响应消息\n     * @throws RpcException 远程调用请求异常\n     */\n    public abstract MessageDto request(String remoteKey, MessageDto msg, long timeout) throws RpcException;\n\n\n    /**\n     * 获取一个远程标识关键字\n     *\n     * @return 远程标识关键字\n     * @throws RpcException 远程调用请求异常\n     */\n    public String loadRemoteKey() throws RpcException {\n        return rpcLoadBalance.getRemoteKey();\n    }\n\n\n    /**\n     * 获取所有的远程连接对象\n     *\n     * @return 远程连接对象数组.\n     */\n    public abstract List&lt;String&gt; loadAllRemoteKey();\n\n\n    /**\n     * 获取模块远程标识\n     *\n     * @param moduleName 模块名称\n     * @return 远程标识\n     */\n    public abstract List&lt;String&gt; remoteKeys(String moduleName);\n\n\n    /**\n     * 绑定模块名称\n     *\n     * @param remoteKey 远程标识\n     * @param appName   应用名称\n     */\n    public abstract void bindAppName(String remoteKey, String appName);\n\n\n    /**\n     * 获取模块名称\n     *\n     * @param remoteKey 远程标识\n     * @return 应用名称\n     */\n    public abstract String getAppName(String remoteKey);\n\n\n    /**\n     * 获取所有的模块信息\n     *\n     * @return 应用名称\n     */\n    public abstract List&lt;AppInfo&gt; apps();\n\n}\n</code></pre>\n<ul>\n<li>发起请求调用客户端初始化接口 <code>RpcClientInitializer</code></li>\n</ul>\n<pre><code>public interface RpcClientInitializer {\n\n\n    /**\n     * message client init\n     * @param hosts\n     */\n    void init(List&lt;TxManagerHost&gt; hosts);\n\n    /**\n     * 建立连接\n     * @param socketAddress\n     */\n    void connect(SocketAddress socketAddress);\n\n}\n\n</code></pre>\n<ul>\n<li>TxManager message初始化接口 <code>RpcServerInitializer</code></li>\n</ul>\n<pre><code>public interface RpcServerInitializer {\n\n\n    /**\n     * support server init\n     *\n     * @param managerProperties   配置信息\n     */\n    void init(ManagerProperties managerProperties);\n\n}\n\n</code></pre>\n<ul>\n<li>客户端请求TxManager的负载策略 <code>RpcLoadBalance</code></li>\n</ul>\n<pre><code>public interface RpcLoadBalance {\n\n    /**\n     * 获取一个远程标识关键字\n     * @return\n     * @throws RpcException\n     */\n    String getRemoteKey()throws RpcException;\n\n\n}\n\n\n</code></pre>\n<p>下面两个用于Tx-Manager与Tx-Client的回调业务</p>\n<p><code>RpcAnswer</code>接口 Tx-Manager与Tx-Client都会实现用于接受响应数据。</p>\n<pre><code>public interface RpcAnswer {\n\n    /**\n     * 业务处理\n     * @param rpcCmd    message 曾业务回调函数\n     *\n     */\n    void callback(RpcCmd rpcCmd);\n\n}\n\n</code></pre>\n<p><code>ClientInitCallBack</code> 接口，用于Tx-Manager下需要处理客户端与TxManager建立连接的初始化回调业务。</p>\n<pre><code>public interface ClientInitCallBack {\n\n\n    /**\n     * 初始化连接成功回调\n     * @param remoteKey 远程调用唯一key\n     */\n    void connected(String remoteKey);\n\n\n}\n\n\n</code></pre>\n<p>实现细节可借鉴 txlcn-txmsg-netty 模块源码</p>\n",
  "link": "\\zh-cn\\docs\\expansion\\message.html",
  "meta": {}
}