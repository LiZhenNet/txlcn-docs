{
  "filename": "client.md",
  "__html": "<h1>TC配置说明</h1>\n<h2>一、application.properties</h2>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># 是否启动LCN负载均衡策略(优化选项，开启与否，功能不受影响)</span>\n<span class=\"hljs-meta\">tx-lcn.ribbon.loadbalancer.dtx.enabled</span>=<span class=\"hljs-string\">true</span>\n<span class=\"hljs-comment\">\n# tx-manager 的配置地址，可以指定TM集群中的任何一个或多个地址</span>\n<span class=\"hljs-comment\"># tx-manager 下集群策略，每个TC都会从始至终&lt;断线重连&gt;与TM集群保持集群大小个连接。</span>\n<span class=\"hljs-comment\"># TM方，每有TM进入集群，会找到所有TC并通知其与新TM建立连接。</span>\n<span class=\"hljs-comment\"># TC方，启动时按配置与集群建立连接，成功后，会再与集群协商，查询集群大小并保持与所有TM的连接</span>\n<span class=\"hljs-meta\">tx-lcn.client.manager-address</span>=<span class=\"hljs-string\">127.0.0.1:8070</span>\n<span class=\"hljs-comment\">\n# 该参数是分布式事务框架存储的业务切面信息。采用的是h2数据库。绝对路径。该参数默认的值为{user.dir}/.txlcn/{application.name}-{application.port}</span>\n<span class=\"hljs-meta\">tx-lcn.aspect.log.file-path</span>=<span class=\"hljs-string\">logs/.txlcn/demo-8080</span>\n<span class=\"hljs-comment\">\n# 调用链长度等级，默认值为3（优化选项。系统中每个请求大致调用链平均长度，估算值。）</span>\n<span class=\"hljs-meta\">tx-lcn.client.chain-level</span>=<span class=\"hljs-string\">3</span>\n<span class=\"hljs-comment\">\n# 该参数为tc与tm通讯时的最大超时时间，单位ms。该参数不需要配置会在连接初始化时由tm返回。</span>\n<span class=\"hljs-meta\">tx-lcn.client.tm-rpc-timeout</span>=<span class=\"hljs-string\">2000</span>\n<span class=\"hljs-comment\">\n# 该参数为分布式事务的最大时间，单位ms。该参数不允许TC方配置，会在连接初始化时由tm返回。</span>\n<span class=\"hljs-meta\">tx-lcn.client.dtx-time</span>=<span class=\"hljs-string\">8000</span>\n<span class=\"hljs-comment\">\n# 该参数为雪花算法的机器编号，所有TC不能相同。该参数不允许配置，会在连接初始化时由tm返回。</span>\n<span class=\"hljs-meta\">tx-lcn.client.machine-id</span>=<span class=\"hljs-string\">1</span>\n<span class=\"hljs-comment\">\n# 该参数为事务方法注解切面的orderNumber，默认值为0.</span>\n<span class=\"hljs-meta\">tx-lcn.client.dtx-aspect-order</span>=<span class=\"hljs-string\">0</span>\n<span class=\"hljs-comment\">\n# 该参数为事务连接资源方法切面的orderNumber，默认值为0.</span>\n<span class=\"hljs-meta\">tx-lcn.client.resource-order</span>=<span class=\"hljs-string\">0</span>\n<span class=\"hljs-comment\">\n# 是否开启日志记录。当开启以后需要配置对应logger的数据库连接配置信息。</span>\n<span class=\"hljs-meta\">tx-lcn.logger.enabled</span>=<span class=\"hljs-string\">false</span>\n<span class=\"hljs-meta\">tx-lcn.logger.driver-class-name</span>=<span class=\"hljs-string\">${spring.datasource.driver-class-name}</span>\n<span class=\"hljs-meta\">tx-lcn.logger.jdbc-url</span>=<span class=\"hljs-string\">${spring.datasource.url}</span>\n<span class=\"hljs-meta\">tx-lcn.logger.username</span>=<span class=\"hljs-string\">${spring.datasource.username}</span>\n<span class=\"hljs-meta\">tx-lcn.logger.password</span>=<span class=\"hljs-string\">${spring.datasource.password}</span>\n\n</code></pre>\n<h2>二、特别配置</h2>\n<h3>1、微服务<code>集群</code>且用到 LCN事务模式时，为保证性能请开启TX-LCN重写的负载策略。</h3>\n<ul>\n<li>Dubbo 开启</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Reference</span>(version = <span class=\"hljs-string\">\"${demo.service.version}\"</span>,\n        application = <span class=\"hljs-string\">\"${dubbo.application.e}\"</span>,\n        retries = -<span class=\"hljs-number\">1</span>,\n        registry = <span class=\"hljs-string\">\"${dubbo.registry.address}\"</span>,\n        loadbalance = <span class=\"hljs-string\">\"txlcn_random\"</span>)  <span class=\"hljs-comment\">// here</span>\n<span class=\"hljs-keyword\">private</span> EDemoService eDemoService;\n</code></pre>\n<ul>\n<li>SpringCloud 开启 (application.properties)</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">tx-lcn.springcloud.loadbalance.enabled</span>=<span class=\"hljs-string\">true</span>\n</code></pre>\n<p>配置详情<a href=\"distributed.html\">参见</a></p>\n<h3>2、关闭业务RPC重试</h3>\n<ul>\n<li>Dubbo 开启</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Reference</span>(version = <span class=\"hljs-string\">\"${demo.service.version}\"</span>,\n        application = <span class=\"hljs-string\">\"${dubbo.application.e}\"</span>,\n        retries = -<span class=\"hljs-number\">1</span>,\n        registry = <span class=\"hljs-string\">\"${dubbo.registry.address}\"</span>,\n        loadbalance = <span class=\"hljs-string\">\"txlcn_random\"</span>)  <span class=\"hljs-comment\">// here</span>\n<span class=\"hljs-keyword\">private</span> EDemoService eDemoService;\n</code></pre>\n<ul>\n<li>SpringCloud 开启 (application.properties)</li>\n</ul>\n<pre><code class=\"language-properties\"><span class=\"hljs-comment\"># 关闭Ribbon的重试机制</span>\n<span class=\"hljs-meta\">ribbon.MaxAutoRetriesNextServer</span>=<span class=\"hljs-string\">0</span>\n</code></pre>\n<hr>\n<p><code>NOTE</code><br>\n1、TxClient所有配置均有默认配置，请按需覆盖默认配置。<br>\n2、为什么要关闭服务调用的重试。远程业务调用失败有两种可能：\n（1），远程业务执行失败 （2）、远程业务执行成功，网络失败。对于第2种，事务场景下重试会发生，某个业务执行两次的问题。\n如果业务上控制某个事务接口的幂等，则不用关闭重试。</p>\n<hr>\n<h3>3、通过AOP配置本地事务与分布式事务</h3>\n<pre><code>@Configuration\n@EnableTransactionManagement\npublic class TransactionConfiguration {\n\n    /**\n     * 本地事务配置\n     * @param transactionManager\n     * @return\n     */\n    @Bean\n    @ConditionalOnMissingBean\n    public TransactionInterceptor transactionInterceptor(PlatformTransactionManager transactionManager) {\n        Properties properties = new Properties();\n        properties.setProperty(&quot;*&quot;, &quot;PROPAGATION_REQUIRED,-Throwable&quot;);\n        TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\n        transactionInterceptor.setTransactionManager(transactionManager);\n        transactionInterceptor.setTransactionAttributes(properties);\n        return transactionInterceptor;\n    }\n\n    /**\n     * 分布式事务配置 设置为LCN模式\n     * @param dtxLogicWeaver\n     * @return\n     */\n    @ConditionalOnBean(DTXLogicWeaver.class)\n    @Bean\n    public TxLcnInterceptor txLcnInterceptor(DTXLogicWeaver dtxLogicWeaver) {\n        TxLcnInterceptor txLcnInterceptor = new TxLcnInterceptor(dtxLogicWeaver);\n        Properties properties = new Properties();\n        properties.setProperty(Transactions.DTX_TYPE,Transactions.LCN);\n        properties.setProperty(Transactions.DTX_PROPAGATION, &quot;REQUIRED&quot;);\n        txLcnInterceptor.setTransactionAttributes(properties);\n        return txLcnInterceptor;\n    }\n\n    @Bean\n    public BeanNameAutoProxyCreator beanNameAutoProxyCreator() {\n        BeanNameAutoProxyCreator beanNameAutoProxyCreator = new BeanNameAutoProxyCreator();\n        //需要调整优先级，分布式事务在前，本地事务在后。\n        beanNameAutoProxyCreator.setInterceptorNames(&quot;txLcnInterceptor&quot;,&quot;transactionInterceptor&quot;);\n        beanNameAutoProxyCreator.setBeanNames(&quot;*Impl&quot;);\n        return beanNameAutoProxyCreator;\n    }\n}\n\n</code></pre>\n<h3>4、TXC模式定义表的实际主键</h3>\n<p>TXC 是基于逆向sql的方式实现对业务的回滚控制，在逆向sql操作数据是会检索对应记录的主键作为条件处理回滚业务。但是在有些情况下可能表中并没有主键字段(primary key)，仅存在业务上的名义主键，此时可通过重写<code>PrimaryKeysProvider</code>方式定义表对应的主键关系。</p>\n<p>如下所示:</p>\n<pre><code class=\"language-java\">\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MysqlPrimaryKeysProvider</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PrimaryKeysProvider</span> </span>{\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Map&lt;String, List&lt;String&gt;&gt; provide() {\n        <span class=\"hljs-comment\">//t_demo 表的回滚主键为 kid字段</span>\n        <span class=\"hljs-keyword\">return</span> Maps.newHashMap(<span class=\"hljs-string\">\"t_demo\"</span>, Collections.singletonList(<span class=\"hljs-string\">\"kid\"</span>));\n    }\n}\n\n</code></pre>\n<h3>5、TC模块标识策略</h3>\n<p>TC模块在负载时，TM为了区分具体模块，会要求TC注册时提供唯一标识。默认策略是，应用名称加端口方式标识。也可以自定义，自定义需要保证各个模块标识不能重复。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModIdProvider</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ModIdProvider</span> </span>{\n    \n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">modId</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> ip + port;\n    }\n}\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\setting\\client.html",
  "meta": {}
}